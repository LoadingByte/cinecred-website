language=English
top=Top
unveilEmail=click for e-mail address
navbar.sitemap=Navigation
navbar.language=Language
404.title=Error 404: Not Found
404.msg=The requested URL was not found on the server. If you entered the URL manually, please check your spelling and try again.
home.title=Home
home.metaDescription=Create beautiful film credits without the pain using Cinecred, a free and open source desktop application.
home.quicklinks.allDownloads=All Downloads
home.quicklinks.sourceCode=Source Code
home.quicklinks.email=E-Mail Address
home.paragraphs.problem.title=The Problem
home.paragraphs.spreadsheet.title=Use Your Favorite Spreadsheet Editor
home.paragraphs.spreadsheet.text=Cinecred can read the raw credits data from a <em>Credits.xls(x)</em> (Microsoft Excel), <em>Credits.ods</em> (OpenOffice/LibreOffice Calc), or <em>Credits.csv</em> file, or even a Google Sheet. Edit it with your preferred spreadsheet tool, integrating perfectly with the rest of your production workflow. Need to add a credit or fix a typo later on? Just change the spreadsheet!
home.paragraphs.liveVis.title=Live Visualization
home.paragraphs.liveVis.text=While editing the credits data and its styling, Cinecred continually updates an interactive visual preview and indicates any problems with the <em>Credits</em> file. Optional layout guides (press the red button in the screenshot) make both learning Cinecred and styling your credits dead easy.
home.paragraphs.liveVis.layoutGuides=Layout Guides
home.paragraphs.styling.title=Interactive Styling
home.paragraphs.styling.text=All the styling options Cinecred provides might seem overwhelming at first. But the interactive nature of Cinecred—including contextual input, live application of changes, and easy reverts—make it intuitive and fun to play around with different settings and thereby explore and learn Cinecred’s styling system. In addition, a comprehensive <a{0}>User Guide</a> is readily available.
home.paragraphs.getStarted.title=Get Started Immediately
home.paragraphs.getStarted.text=Cinecred initializes new projects with a template that covers many common use cases. Start entering your credits straightaway and learn how to further customize them as you go.
home.paragraphs.flexible.title=Flexible Design
home.paragraphs.flexible.text=In addition to standard use cases, Cinecred’s flexible styling system enables a wide range of layouts and designs. Whatever you have in mind, Cinecred can likely assist you in implementing it.
home.paragraphs.media.title=Embed Media
home.paragraphs.media.text=Cinecred supports more than just text. Whether you want to insert a logo image, play a vanity card, or show a blooper video—Cinecred lets you do it.
home.paragraphs.runtime.title=Your Desired Runtime
home.paragraphs.runtime.text=Have to add another name, but the score has already been recorded and synced to the earlier version? Just tell Cinecred the desired runtime of the whole credits or specific sections, and it will shrink vertical gaps to exactly match it—without resorting to shimmer-prone fractional scroll speeds. Test it yourself and press the red button in the screenshot!
home.paragraphs.playback.title=Play Back at Any Time
home.paragraphs.playback.text=Want to watch your credits in motion to verify your latest changes? Just like your favorite editing suite, Cinecred offers instant real-time playback at any time. No need to wait for your credits to render out. Playout to <a{0}>DeckLink</a> cards is also supported.
home.paragraphs.delivery.title=Manifold Delivery Options
home.paragraphs.delivery.text=Does your post-production workflow require ProRes, PNG sequences, or even TIFFs which you animate yourself? Do you want to export in BT.2020 PQ, or send around PDFs of the credits for checks? No matter what the need, Cinecred probably has you covered. Expand the red dropdown in the screenshot to see all supported formats.
home.paragraphs.free.title=Cinecred is Free Software
home.paragraphs.free.text=Licensed under the GPLv3, everyone can use Cinecred free of charge forever. The source code is publicly available in a <a{0}>GitHub Repository</a>. Contributions, bug reports, and suggestions are welcome! In case of questions, issues, or ideas, also don’t hesitate to send me an email to {1}. If you miss some feature, let me know!
home.paragraphs.sampleCredits.title=Sample Credits
home.paragraphs.sampleCredits.text=Watch these credits to get a feel for the capabilities of Cinecred. The clip is taken from Etiology and has been sped up to 60fps so that it plays back without stutter on computer monitors.
home.paragraphs.try.title=Want to give Cinecred a try?
home.paragraphs.try.button=To the Downloads
linux-repositories.title=Linux Repositories
linux-repositories.intro=We provide repositories for the following popular Linux package managers. In case you use one of them, we heavily recommend using these repositories as that will ensure that Cinecred is always up-to-date.
linux-repositories.ownRepo=We host Cinecred in our own {0} repository, which you can incorporate like this:
linux-repositories.installCommands=Now install Cinecred using the following commands:
linux-repositories.apt.pgp=Download our PGP key using these commands:
linux-repositories.apt.repo=Add our APT repository to your APT sources list using this command:
linux-repositories.yum.repo=Add our YUM repository to your YUM repository list by creating the file {0} and filling it with the following content:
linux-repositories.aur.link=Cinecred is <a{0}>available in the Arch User Repository (AUR)</a>. You can install the package from there.
dl.title=Downloads
dl.installer=Installer
dl.portable=Portable
security-warnings.title=Security Warnings
security-warnings.intro=If you receive unsettling security warnings from your web browser or OS, this page might help you. We give you some background on these warnings, explain why they appear, and show you how to install Cinecred nevertheless.
security-warnings.windows.title=Windows
security-warnings.windows.smartScreen=Microsoft includes its security measure SmartScreen in both Windows itself and its default browser Edge. By default, it raises warnings when launching applications downloaded from the Internet. The developer can prevent these warnings by either buying expensive and regularly expiring OV certificates (Organization Validation) or even more expensive EV ones (Extended Validation) and signing his application with those (Code Signing). To make things worse, the warnings still do not disappear immediately when using OV certificates, but instead, both the application and the certificate need to build “reputation” over time, which could take years. For more information, please refer to the corresponding <a{0}>Wikipedia article</a> or other web sources.
security-warnings.windows.costly=As Cinecred is a free and open source effort, we cannot afford to buy such certificates. Hence, sadly you have to go through several security warnings when installing Cinecred.
security-warnings.windows.edge.title=When Downloading via Edge
security-warnings.windows.edge.warning=If you are using the Microsoft Edge web browser to download the Cinecred installer, you receive the following security warning:
security-warnings.windows.edge.keep=To nevertheless complete the download, click the three dots and choose “Keep”:
security-warnings.windows.edge.showMore=Next, click “Show more”:
security-warnings.windows.edge.keepAnyway=Finally, choose “Keep anyway” to make Edge unblock the installer:
security-warnings.windows.launch.title=When Launching the Installer or App
security-warnings.windows.launch.warning=When launching the Cinecred installer or the “cinecred.exe” extracted from the ZIP, you receive the following security warning. First, click “More info”:
security-warnings.windows.launch.runAnyway=Then, click “Run anyway” to commence the installation:
security-warnings.macOS.title=macOS
security-warnings.macOS.gatekeeper=Apple’s security measure Gatekeeper prohibits launching applications downloaded from the Internet. The developer can prevent these warnings by signing his application with a certificate provided by Apple (Code Signing) and sending in the application so that Apple can check it (notarization). However, this requires a Developer ID account, which costs $99 annually. Because the certificates expire after some time, the signatures of installer packages need to be renewed regularly, hence we would need to pay this fee indefinitely. For more information, please refer to the corresponding <a{0}>article by Apple</a> or other web sources.
security-warnings.macOS.costly=As Cinecred is a free and open source effort, we cannot afford to subscribe to Developer ID. Hence, you sadly receive a security warning when installing Cinecred.
security-warnings.macOS.install.title=When Launching the Installer
security-warnings.macOS.install.warning=When launching the Cinecred installer, you receive the following security warning:
security-warnings.macOS.install.rightClick=To install Cinecred despite this warning, right-click the installer package in Finder and choose “Open”:
security-warnings.macOS.install.open=In the dialog which follows, you may click “Open” to commence the installation:
security-warnings.macOS.app.title=When Launching the App
security-warnings.macOS.app.warning=When launching “Cinecred.app”, some users receive the following error message:
security-warnings.macOS.app.open=To launch Cinecred despite it, first try right-clicking the app and choosing “Open” from the context menu, like we illustrated in the previous section for the installer. The error window still comes up, but should now include an “Open” button. Clicking that launches the app.
security-warnings.macOS.app.quarantine=If the “Open” button doesn’t appear, the cause is likely the quarantine attribute, which is added to all downloaded files. To remove it, open a Terminal and type the following:
security-warnings.macOS.app.quarantine.downloads=If the app is in your user’s Downloads folder:
security-warnings.macOS.app.quarantine.applications=If the app is in the Applications folder:
security-warnings.macOS.app.launch=Afterward, the app will launch normally.
screencast.title=Screencast
screencast.text=In addition to the written <a{0}>user guide</a> and Cinecred’s introductory hint track after installation, we offer the following comprehensive screencast with explanatory subtitles. After watching the video, you’ll be familiar with the essentials of Cinecred.
donate.title=Donate
donate.intro=Thank you for supporting the development of Cinecred! There are three ways:
donate.card.title=Credit Card or Debit Card
donate.sepa.title=SEPA Credit Transfer
donate.sepa.text=You can also directly donate via SEPA Credit Transfer. To obtain the IBAN, send an email to Felix Mujkanovic at {0}.
guide.colon={0}: {1}
guide.settingDemo=Setting demonstration
guide.styleName=Name
guide.title=User Guide
guide.hintsAndScreencast=Cinecred offers brief introductory hints upon the first launch. In addition, there is a subtitled <a{0}>screencast</a> that concisely and clearly introduces the foundations of Cinecred.
guide.intro=However, both only scratch the surface. To really understand Cinecred and eventually dive deeper, this complimentary user guide can be used both as a learning resource and a comprehensive reference of all available features. To browse it, use the <em>Navigation</em> menu in the top left corner, or alternatively the following links. The first few articles are a must-read when starting out, especially if you didn’t watch the screencast.
guide.project-folder.title=Project Folder
guide.project-folder.structure=In Cinecred, you usually create a new project for each film. A project is nothing more than a folder with the following files:
guide.project-folder.structure.creditsFile={0}, which is a spreadsheet with your list of credits. You edit it with your favorite spreadsheet editor (Microsoft Excel, OpenOffice, LibreOffice etc.). Every time you save the file, Cinecred refreshes the preview.\nAlternatively, you may use a {1} file that points to a Google Sheet.\nThe <em>Credits</em> file may host multiple credits sequences by having multiple worksheets (e.g., one for opening and one for closing credits).
guide.project-folder.structure.stylingFile={0}, which stores project-wide settings and a list of styles. You edit this file via the styling window in Cinecred.\nOn its own, Cinecred wouldn’t know how to render your credits. To tell Cinecred, you first configure styles in the styling window and then assign them at various points in the <em>Credits</em> spreadsheet.
guide.project-folder.structure.fontFiles=Font files ({0} or {1})
guide.project-folder.structure.rasterPicFiles=Raster picture files (e.g., {0})
guide.project-folder.structure.vectorPicFiles=Vector picture files ({0})
guide.project-folder.structure.videoFiles=Video files (e.g., {0})
guide.project-folder.structure.imgSeqFolders=Image sequence folders
guide.project-folder.example=Fonts, pictures, videos, and image sequences can be organized in arbitrary subfolders. Thus, a typical project folder could, for example, look like this:
guide.project-folder.share=To collaborate with others, you can simply share the project folder as it is fully self-contained.
guide.project-folder.create.title=Creating a Project
guide.project-folder.create.how=To create a new project, you point the creation wizard to an empty folder—for example by drag-and-dropping it into the welcome window. Cinecred then places template <em>Styling.toml</em> and <em>Credits</em> files in that folder and thereby initializes the project. You can select the language, resolution, frame rate, and timecode format, choose to start with sample credits, and decide between a local <em>Credits</em> spreadsheet and a Google sheet:
guide.project-folder.create.googleSheet=If you decide on a Google Sheet, you first need to add your Google account in the preferences tab in the welcome window:
guide.user-interface.title=User Interface
guide.user-interface.overview=When opening a project in Cinecred, a main window comes up that snaps to the left side of the screen. There exist three additional windows for performing specific tasks. You can show and hide these additional windows via three buttons in the main window.
guide.user-interface.overview.alt=Showing and hiding the three additional windows
guide.user-interface.mainWindow.title=Main Window
guide.user-interface.mainWindow.preview=But first, let’s focus on the main window. Most of its area is occupied by a still preview of your credits.
guide.user-interface.mainWindow.preview.alt=Flicking through the pages in the still preview
guide.user-interface.mainWindow.layoutGuides=Sometimes it’s hard to visualize how the layout falls in place. To this end, Cinecred adds helpful layout guides to this preview, which you can of course turn off for an unobstructed view. Hovering over the toggle brings up the following legend:
guide.user-interface.mainWindow.layoutGuides.alt=Toggling the layout guides
guide.user-interface.mainWindow.standardOverlays=If you need to conform to safe areas or ensure that your credits fit inside a <em>16:9</em> or <em>4:3</em> crop, use the corresponding buttons in the dropdown menu to enable overlays:
guide.user-interface.mainWindow.customOverlays=Further, you can add custom overlays in the preferences tab in the welcome window. Choose between a custom aspect ratio crop, a set of custom horizontal and vertical helper lines, and a custom image that is laid over or under the preview:
guide.user-interface.stylingWindow.title=Styling Window
guide.user-interface.stylingWindow.intro=The styling window lets you edit the <a{0}>project settings</a> as well as the <a{1}>page</a>, <a{2}>content</a>, and <a{3}>letter</a> styles. Click on a style in the list to edit it. Click on one of the plus buttons above to add a new style, or the trash button to delete any style. Use the save button in the main window to save your changes. There, you’ll also find undo and redo buttons.
guide.user-interface.stylingWindow.intro.alt=Editing the styling, then using undo, redo, and saving it
guide.user-interface.stylingWindow.loadLastSaved=And if you’ve styled yourself into a corner, use the <em>load last saved</em> button to revert all your changes. The current styling will be retained as an undo state.
guide.user-interface.stylingWindow.loadLastSaved.alt=Editing the styling, then loading the last saved one
guide.user-interface.stylingWindow.snap=By default, the styling window snaps to the right side of the screen. We advise you to snap the spreadsheet editor to the same place. This way, you can use the styling window toggle button to switch between the styling window and the spreadsheet editor while working on your project.
guide.user-interface.stylingWindow.snap.alt=Snapping the spreadsheet editor to the right side of the screen
guide.user-interface.videoWindow.title=Video Preview Window
guide.user-interface.videoWindow.intro=At any time, you can open the integrated video preview window to watch your credits in action. You may use the familiar JKL shuttle keys to play at varying speeds. It’s also possible to toggle full screen or 1:1 actual pixel size playback.
guide.user-interface.videoWindow.intro.alt=Playing back the credits using the video preview
guide.user-interface.videoWindow.deckLink=Cinecred can also play out the preview to <a{0}>DeckLink</a> cards. If one is detected, DeckLink buttons are added to the playback controls, and a handy secondary control bar appears in the main window. Click the gear to select a line and to configure the playout stream, then click the connection button to start the playout. The configuration will be memorized on restarts.
guide.user-interface.videoWindow.deckLink.alt=Configuring the DeckLink playout
guide.user-interface.deliveryWindow.title=Delivery Window
guide.user-interface.deliveryWindow.formats=When you’re ready to export, you’ll find manifold delivery options in the delivery window. Aside from ProRes, DNxHR, and CineForm video, various image sequence formats and H.264/H.265 previews are available. Or just export stills of title cards and entire scrolling sections as PDF or images for your colleagues to check. If you embedded videos, you may also export a {0} timeline of their audio to precisely align it later in finishing.
guide.user-interface.deliveryWindow.transparency=Some formats directly support a transparent background via the {0} option in the {1} menu, which is handy if you intend to use the credits in compositing. For other formats, you can export the isolated alpha channel as a grayscale matte via the {2} option.
guide.user-interface.deliveryWindow.multipliers=If you need a higher or lower resolution or higher frame rate version of your credits, use the resolution and frame rate multipliers.
guide.user-interface.deliveryWindow.interlacing=Some formats support interlaced output. You can choose the field order in the {0} menu. Notice that the fields will really be sampled at double the frame rate. For example, if the scroll speed is 4 pixels per frame, the credits will advance by 2 pixels each field.
guide.user-interface.deliveryWindow.colorSpaces=If you are not familiar with color spaces, the default settings are likely the right choice. For advanced users, Cinecred offers a wide range of gamuts, EOTFs, and YUV matrices. Please refer to the <a{0}>color management page</a> for details.
guide.user-interface.deliveryWindow.alt=Setting up a render job in the delivery window
guide.user-interface.deliveryWindow.destTemplate=The destination filename is usually generated via a delivery destination template, which assembles the filename from properties like the project name or the exported FPS. A few of these templates are included, and you can add custom ones. Unless the template specifies an absolute path, you get to choose the destination folder in the delivery window.
guide.user-interface.deliveryWindow.destCustom=Alternatively, you can also forego templates entirely and specify the destination file manually by selecting {0}.
guide.user-interface.deliveryWindow.dest.alt=Changing the render destination using templates
guide.user-interface.log.title=Warnings and Errors
guide.user-interface.log.creditsWarning=Naturally, mistakes happen. When something’s wrong in the <em>Credits</em> file, Cinecred shows a warning message beneath the preview in the main window. Such warnings also establish some context to help you solve the problem.
guide.user-interface.log.stylingWarning=In contrast, when something’s wrong with the styling, Cinecred shows a warning directly next to the problematic setting in the styling window.
guide.user-interface.log.alt=Warnings about issues with the Credits file and styling
guide.credits-spreadsheet.title=Credits Spreadsheet
guide.credits-spreadsheet.content=The <em>Credits</em> spreadsheet in the project folder houses your credits alongside some important metadata. It can host multiple credits sequences by having multiple worksheets (e.g., one for opening and one for closing credits).
guide.credits-spreadsheet.fileFormat=The file may either be a local {0} file or an {1} shortcut that points to a Google Sheet.
guide.credits-spreadsheet.changeFileFormat=To change the format, simply switch out the <em>Credits</em> file. For example, to change from a local to a cloud project, just upload your local {0} file to Google Sheets, put a shortcut named {1} to the Google Sheet into the project folder, and delete the old <em>Credits</em> file.
guide.credits-spreadsheet.header=Towards the top of the spreadsheet, you’ll find the table header, which defines the following columns:
guide.credits-spreadsheet.explain=This article explains the meaning of each column, as well as all other aspects of the spreadsheet. For conciseness, the example tables omit columns that are irrelevant.
guide.credits-spreadsheet.blocks.title=Head-Body-Tail Blocks
guide.credits-spreadsheet.blocks.intro=A person’s name often times doesn’t stand alone. Most likely, it’s accompanied by a role name, job title, or some other prefix or suffix. Sometimes, multiple people share the same job title (for example in a list of extras).
guide.credits-spreadsheet.blocks.model=Cinecred models all this via so-called <em>head-body-tail blocks</em>. Such a block consists of an optional head text, an arbitrary number of body texts, and an optional tail text. Here are some example blocks as they would appear in the spreadsheet.
guide.credits-spreadsheet.blocks.examples.onlyName=A standalone actor block on a title card could have a single body cell with the actor’s name:
guide.credits-spreadsheet.blocks.examples.singleCredit=A single credit block could have the head “{0}” and a single body cell with the gaffer’s name:
guide.credits-spreadsheet.blocks.examples.manyNames=A drivers block could have the head “{0}” and one body cell for each driver:
guide.credits-spreadsheet.blocks.examples.song=A song block could have the song title as its head and one body cell for each credit line:
guide.credits-spreadsheet.blocks.examples.openingTitle=An opening title block could have a single body cell with the director’s name and some enclosing words in the head and tail:
guide.credits-spreadsheet.blocks.manualLinebreaks=The head and tail may contain manual linebreaks if the <a{0}><em>content style</em></a> has <a{1}>vertical orientation</a>. Similarly, the body may contain manual linebreaks if the content style uses the <a{2}>paragraphs body layout</a>.
guide.credits-spreadsheet.blocks.tags.title=Tags
guide.credits-spreadsheet.blocks.tags.blank=Sometimes, it’d be nice to insert a blank body cell. Simply leaving an empty cell would however split the block in two. Instead, use the “{0}” tag:
guide.credits-spreadsheet.blocks.tags.style=As you will learn later on, the look of text is governed by <a{0}><em>letter styles</em></a>. To change the letter style of the head, body, or tail mid-text, use the “{1}” tag. It either applies a specific letter style (“{2}”), or resets to the initial style (“{1}”):
guide.credits-spreadsheet.picturesAndVideos.title=Pictures & Videos
guide.credits-spreadsheet.picturesAndVideos.how=Instead of text, a body cell can also contain a picture or video from the project folder or any subfolder. For example, to insert {0} and {1}, write:
guide.credits-spreadsheet.picturesAndVideos.configure=As you can see, you may omit the file extension. Once added, you will be able to <a{0}>configure the picture or video in the styling window</a>. To separately configure multiple appearances of the same picture or video, append a qualifier:
guide.credits-spreadsheet.picturesAndVideos.imgSeqLayout=Image sequences are also supported. Suppose there’s the following sequence in the project folder:
guide.credits-spreadsheet.picturesAndVideos.imgSeqSyntax=To include it, refer to the name of the sequence folder:
guide.credits-spreadsheet.vGaps.title=Vertical Gaps
guide.credits-spreadsheet.vGaps.unitBased=You declare vertical gaps between blocks directly in the spreadsheet. An empty row automatically constitutes a vertical gap of 1 unit. Alternatively, you can manually enter a vertical gap in between two blocks, which overrides the automatic gaps:
guide.credits-spreadsheet.vGaps.unit=A vertical gap of 1 unit corresponds to some amount of pixels. You can configure this amount in the <a{0}>project settings</a>. We advise you to set it to your main font height, but other choices are also valid if they aid your design.
guide.credits-spreadsheet.vGaps.pixelBased=Sometimes it might be necessary to specify vertical gaps directly in pixels. This can be done by appending “px”:
guide.credits-spreadsheet.contentStyles.title=Content Styles
guide.credits-spreadsheet.contentStyles.need=Cinecred needs to know how you want each block to be rendered. For example, while a job-person-block usually has the head (job) <em>to the left</em> of the body (person), a song has the head (song title) <em>above</em> the body (song details). And if there are multiple body cells, should they be put in a grid or flown dynamically? Should the body be interpreted as paragraphs? Which fonts should be used? And so on…
guide.credits-spreadsheet.contentStyles.how=All these aspects and lots more are defined by <a{0}><em>content styles</em></a>, which you configure in the styling window. You then put the name of such a content style in the spreadsheet to assign it to all following blocks:
guide.credits-spreadsheet.spinePos.spine=The spine is the vertical cyan line in the preview. Cinecred strings together blocks along it, one below the other. The spine is centered by default, but you can move it using the {0} spreadsheet column.
guide.credits-spreadsheet.spinePos.onScrollPages=On scroll pages, you move the spine left or right by specifying a horizontal pixel offset from the screen center:
guide.credits-spreadsheet.spinePos.onCardPages=On card pages, you can move the spine to any position by specifying a horizontal and optionally vertical pixel offset from the screen center. This position will be marked as a small cyan diamond. By default, the spine will be vertically centered around the position, but you can append “{0}” or “{1}” to put the spine below or above it:
guide.credits-spreadsheet.spinePos.parallel=On both scroll and card pages, you can have the spine run parallel to the previous one by specifying a horizontal offset from the center and appending “{0}”:
guide.credits-spreadsheet.spinePos.hook=In cases where a simple “{0}” is too limited, you can also arbitrarily arrange the spine in relation to a previous one. To do this, write “{1}”, followed by how many spines we have to walk back to reach the spine that the new one will be attached to. Then specify which point in the other spine (“{2}”, “{3}”, or “{4}”) should be connected to which point in the new spine. For example, write “{4}-{2}” to glue the end of the other spine to the start of the new one. Optionally, append a horizontal and vertical pixel distance between the connected points:
guide.credits-spreadsheet.spinePos.compound=Notice that with both “{0}” and “{1}”, the whole compound is positioned as one big unit, not just the root spine. For example, when you look at the cyan diamond in the image above, you see that the whole compound is vertically centered around the position (-50, 0).
guide.credits-spreadsheet.pageStyles.title=Page Styles
guide.credits-spreadsheet.pageStyles.intro=Cinecred supports both title cards and rolling credits. The umbrella term for both is <em>page</em>. Your credits are simply composed of a sequence of pages. The behavior of each page (that is, whether it’s a card or a scroll, and details like the fade duration and scrolling speed) is defined by a <em>page style</em>, which you configure in the styling window. The default template ships with two aptly named page styles: “{0}” and “{1}”.
guide.credits-spreadsheet.pageStyles.how=In the spreadsheet, you indicate the start of a new page by putting the name of a page style there:
guide.credits-spreadsheet.pageRuntime.singlePage=This column sets the runtime (including fades) of a particular page, overriding all styling settings. When used on a scroll page, it shrinks or grows the vertical gaps to tune the runtime, just like the project-wide {0} or the per-style {1}.
guide.credits-spreadsheet.pageRuntime.pageGroup=You may also jointly tune any group of scroll pages. To do this, specify the runtime only for the group’s first page, but prepend a group name that you then reference from the group’s other pages. Notice that card pages cannot be included in a group.
guide.credits-spreadsheet.pageGap.pause=If you put a timecode into this column between two pages, the credits will show a blank screen between them for that amount of time, overriding the {0} page style setting. Negative durations are also admissible and cause the next page to commence while the previous page is still running. For example, you could let a copyright title card fade in while the credits are still rolling out of frame.
guide.credits-spreadsheet.pageGap.melt=Alternatively, you can put “{0}” here to absorb the two pages into a bigger page. For example, say that a scroll page is melted with a following card page. The scroll first commences as usual, but then at its end actually includes the card and stops on it; the card then takes over and finally fades out after its display duration has passed. You could use this feature to, for example, stop the credits roll on a final copyright notice, which then gracefully fades out.
guide.credits-spreadsheet.pageGap.meltTransition=By default, the scroll speed change between melted pages is quite abrupt. To make it smooth, put a transition duration timecode and a <a{0}><em>transition style</em></a> behind “{1}” (see example table below). The transition style determines how the scroll speed goes from full to 0 at the melting point (or the other way around).
guide.credits-spreadsheet.pageGap.pagePreview=Here’s the page preview for the above table both with and without melting:
guide.credits-spreadsheet.pageGap.videoPreview=And here’s how the smooth melting looks in the final video:
guide.credits-spreadsheet.pageGap.noMeltLimit=There is no limit to the number of pages you can melt together. For example, you could have an elaborate sequence of cards and scrolls all melt into a single page, which then looks like a single scroll that pauses multiple times.
guide.credits-spreadsheet.pageGap.emptyScrollPages=And finally, here’s a neat trick. You can melt a card with an empty scroll page and combine that with a negative page gap to make the card stop while the rest of the credits scrolls away:
guide.credits-spreadsheet.breakHarmonization.title={0} (Advanced)
guide.credits-spreadsheet.breakHarmonization.familiar=To understand this column, you need to be familiar with the family of <em>harmonization</em> settings found in content styles; namely {0} and {1} for grid layouts, {2} for flow layouts, and finally {3} for heads and tails. As you know, these settings harmonize blocks all throughout the credits in various ways.
guide.credits-spreadsheet.breakHarmonization.use=Now, what if you want the harmonization to not reach beyond a certain point? Say you’ve got two sections of gutter blocks on your page. While you’d like all head and body cells within either section to have the same width, this harmonization should not happen between the two sections. Well, simply put a space-separated list of “{0}”, “{1}”, and/or “{2}” into the {3} column:
guide.project-settings.title=Project Settings
guide.project-settings.intro=In the styling window, clicking on the first entry <em>Project Settings</em> brings up the project-wide settings. Their meaning is explained in this article.
guide.project-settings.runtimeAndFPS.title={0} & {1}
guide.project-settings.runtimeAndFPS.text=You can select the frame size from a list of common ones, or, if needed, enter a custom pixel width and height. Similarly, either choose a preset frame rate, or enter a custom one as an integer (e.g., “10”) or fraction (e.g., “25/2”).
guide.project-settings.timecodeFormat.text=At various places, Cinecred presents or reads in timecodes. You decide on the format: SMPTE, a clock, or just a plain frame counter. The frame rates <em>29.97</em> and <em>59.94</em> also admit SMPTE Drop-Frame timecodes. For any other fractional frame rate, use the <em>Exact Frames in Each Second</em> format, which per second just enumerates all frames, starting from 0.
guide.project-settings.runtimeFineAdjustment.how=Sometimes, it’s necessary to peel a few seconds off your credits. For example, say you added a forgotten name last-minute, but now the scroll takes ever so slightly longer and no longer matches the already recorded music. In such cases, the <em>Runtime Fine Adjustment</em> setting allows you to specify a target runtime, which is then matched by slightly compressing vertical spacing in your credits roll. Of course, increasing the runtime is also possible.
guide.project-settings.runtimeFineAdjustment.warning=<strong>Attention! As implied by the name, this setting should only be used for minor adjustments to the runtime.</strong> Bigger adjustments will heavily shrink or grow the vertical spacing and thereby make the credits look wonky. Instead, change the scroll speed or card timings to get the runtime into the right ballpark.
guide.project-settings.runtimeFineAdjustment.multi=In case there are multiple scrolling sections, this setting will affect all of them in the same way. If you need more control, use the per-style {0} setting or the {1} column in the <em>Credits</em> spreadsheet.
guide.project-settings.leaveFramesBlank.title=Leave First/Last Frame Blank
guide.project-settings.leaveFramesBlank.text=By default, the first and last frame of the credits already depict content. These two setting append one empty frame on either end, which is useful if your credits sequence is the first or last clip of the entire film.
guide.project-settings.grounding.text=This setting defines the background color of the entire sequence. If you need a transparent background for manual compositing, that option is available upon export provided the respective format supports transparency.
guide.project-settings.unitVGap.use=As explained in the section about <a{0}>vertical gaps</a> in the <em>Credits</em> spreadsheet, vertical gaps between blocks are not given directly in pixels, but instead in a custom unit. This setting defines that unit.
guide.project-settings.unitVGap.tip=We advise to set the unit to your main font height. For example, if most of your fonts are 32 pixels in height, set the unit to 32 pixels as well. That way, a vertical gap of 1 unit—which is automatically inserted for each blank line in the spreadsheet—has the same height as one line of text. Of course, it’s entirely reasonable to deviate from this recommendation if that helps your design.
guide.project-settings.locale.text=Even though it’s not always necessary, it’s good practice to specify the language and optionally dialect your credits are written in. The chosen language is then used to choose the right variant of a character, for example from the Serbian instead of the Russian Cyrillic alphabet, and in all language-sensitive operations, for example in uppercasing.
guide.project-settings.uppercaseExceptions.intro=Cinecred can automatically <a{0}>uppercase text</a>. However, some portions like nobiliary particles should usually be exempted. This setting enumerates those exceptions, with each line declaring one pattern.
guide.project-settings.uppercaseExceptions.simple=A very simple pattern just consists of the text that should not be uppercased. For example, the pattern “ra” causes all occurrences of <em>ra</em> to remain in lower case, and as such, <em>Sarah</em> would become <em>SAraH</em>.
guide.project-settings.uppercaseExceptions.placeholders=You can restrict where the pattern applies by adding a placeholder to the beginning and/or end. The placeholder “#” requires any uppercase or titlecase letter. The placeholder “_” requires either whitespace or the beginning/end of the text. Here are some example patterns and their effect:
guide.project-settings.uppercaseExceptions.pattern=Pattern “{0}”:
guide.project-settings.uppercaseExceptions.default=By default, this setting already lists a rich selection of nobiliary particles. If you miss one, you now know how to add it.
guide.page-style.title=Page Styles
guide.page-style.intro=In Cinecred, a <em>page</em> is either a title card or a section of rolling credits. The exact behavior of pages is defined by <em>page styles</em>. You create these styles in the styling window, and then <a{0}>assign them</a> to the pages in the <em>Credits</em> spreadsheet. This article explains the configuration options of a page style.
guide.page-style.name.text=Like all other styles, page styles have a unique name. It is used to reference them from the <em>Credits</em> spreadsheet.
guide.page-style.subsequentGap.style=The credits will show a blank screen for this amount of time after the page has concluded. Negative durations are also admissible and cause the next page to commence while the current page is still running. For example, you could let a copyright title card fade in while the credits are still rolling out of frame.
guide.page-style.subsequentGap.sheet=To control the gap between two specific pages, use the {0} column in the <em>Credits</em> spreadsheet.
guide.page-style.card.intro=When the {0} setting is set to “{1}”, the page behaves as a title card. That is, it fades in, stays still for some time, and then fades out again.
guide.page-style.card.runtime.style=The title card is visible for this runtime (including fades).
guide.page-style.card.runtime.sheet=To control the runtime of one specific card, use the {0} column in the <em>Credits</em> spreadsheet.
guide.page-style.card.fade.title=Fade In/Out
guide.page-style.card.fade.text=These settings specify how long fading in and out takes. A duration of 0 means no fade. Notice that the fading times do neither include black nor fully opaque frames. For example, setting {0} to “2” frames will generate one frame with ⅓ opacity and a second frame with ⅔ opacity. Finally, you can also specify a <a{1}><em>transition style</em></a> that governs the exact fading curve.
guide.page-style.scroll.intro=When the {0} setting is set to “{1}”, the page slowly rolls down the screen at a constant speed.
guide.page-style.scroll.perFrame.desc=The scroll page will scroll down this amount of pixels in every frame. For 2K resolutions, a speed of 3 is a good tradeoff between rapidity and readability. Analogously, a speed of 6 is well-suited for 4K resolutions. Other choices can of course also be valid.
guide.page-style.scroll.perFrame.warning=<strong>Attention! It is highly advised to only use integer speeds here.</strong> If you use a fractional speed, the text’s alignment relative to the pixel raster changes every frame, which causes the pixels to be filled differently. This often leads to undesirable shimmer.
guide.page-style.scroll.runtimeFineAdjustment.style=You might already be familiar with the project-wide {0} setting, which shrinks or grows vertical gaps across all scroll pages to tune the runtime of the entire credit sequence. This setting works similarly, but tunes each scroll page with this style in isolation.
guide.page-style.scroll.runtimeFineAdjustment.sheet=To tune the runtime of one specific scroll page, use the {0} column in the <em>Credits</em> spreadsheet.
guide.content-style.breakHarmonization=To break the enforcement at some point, use the {0} column in the <em>Credits</em> spreadsheet.
guide.content-style.title=Content Styles
guide.content-style.intro=Content styles tell Cinecred how to layout and render <a{0}>head-body-tail blocks</a>. You create these styles in the styling window, and then <a{1}>assign them</a> to the blocks in the <em>Credits</em> spreadsheet. This article explains the configuration options of a content style.
guide.content-style.name.text=Like all other styles, content styles have a unique name. It is used to reference them from the <em>Credits</em> spreadsheet.
guide.content-style.orientation.text=This setting configures whether the head and tail should be placed horizontally next to the body, or vertically above and below the body.
guide.content-style.spineAttachment.spine=The spine is the vertical cyan line along which blocks are placed. By default, there is a single centered spine, but you can <a{0}>change that</a> in the <em>Credits</em> spreadsheet.
guide.content-style.spineAttachment.setting=This setting configures at which horizontal location the spine passes through the block. For example, you could choose to have the spine pass through the gap between the head and body. The block is then positioned accordingly.
guide.content-style.vMargin.setting=At least this amount of pixels must remain blank above and below the block. Think of it as a minimum vertical gap. As such, if the neighboring block has a bigger margin, or if a bigger vertical gap is specified in the spreadsheet, this setting has no effect.
guide.content-style.vMargin.betweenSpines=This margin only applies within a spine, but not between spines. The rationale is that if you are breaking spines, you should be hand-crafting the vertical spacing at that point anyway.
guide.content-style.vMargin.example=For example, see how increasing the vertical margin of the blocks in the following example affects the final vertical gaps:
guide.content-style.bodyLetterStyle.external=While the various settings of a content style control the layout of a block, they don’t configure the appearance of text. That is left to <a{0}>letter styles</a>, which select a font, set the size, and provide a lot more options for creative design.
guide.content-style.bodyLetterStyle.reference=A content style then simply references the letter style that should render the body text.
guide.content-style.bodyLayout.cells=As you know, a block may comprise multiple body cells. For example, a list of drivers could consist of the head “Drivers” and the three body cells “Dominic”, “Detlef”, and “Dora”.
guide.content-style.bodyLayout.layout=The body layout controls how these body cells should be arranged. There are three layouts available:
guide.content-style.bodyLayout.options=Each layout has its own set of configuration options, which are detailed on the following articles:
guide.content-style.sort.text=This setting sorts the body cells in alphabetical order.
guide.content-style.headTail.title=Allow Head/Tail
guide.content-style.headTail.enable=While every block has a body, the head and tail are optional. If you want to have either, you need to enable support in the block’s content style. This will also bring up more settings to customize the head or tail.
guide.content-style.headTail.letterStyle.title=Head/Tail Letter Style
guide.content-style.headTail.letterStyle.text=Similarly to the {0}, a content style references two more <a{1}>letter styles</a> to use for the head and tail text, if applicable.
guide.content-style.headTail.forceWidth.title=Force Head/Tail Width
guide.content-style.headTail.forceWidth.text=These settings force all heads or tails to have a certain, manually specified width. They are only available for content styles which are <a{0}>oriented horizontally</a>.
guide.content-style.headTail.harmonizeWidth.title=Harmonize Head/Tail Width
guide.content-style.headTail.harmonizeWidth.behavior=These settings force all heads or tails to have the same width. By default, it only affects blocks of the same content style, but can be broadened to include other content styles.
guide.content-style.headTail.harmonizeWidth.precondition=These settings are only available for content styles which are <a{0}>oriented horizontally</a>.
guide.content-style.headTail.hJustify.title=Horizontally Justify Head/Tail
guide.content-style.headTail.hJustify.text=These settings control whether the head or tail should be justified left, centered, or justified right inside its allotted box, which is marked by green layout guides.
guide.content-style.headTail.vJustify.title=Vertically Justify Head/Tail
guide.content-style.headTail.vJustify.text=When the content style is <a{0}>oriented horizontally</a>, these settings controls the vertical positioning of the head or tail. First, if the body has more than one row, the left buttons decide whether the head or tail should be placed in the top body row, bottom body row, or the overall center. Second, the right buttons decide whether the head or tail should be justified top/middle/bottom in the selected body row, or aligned with the selected body row’s baseline.
guide.content-style.headTail.bodyGap.title=Head/Tail-Body Gap
guide.content-style.headTail.bodyGap.text=This amount of blank pixels is inserted between the block’s body and the head or tail.
guide.content-style.headTail.leader.title=Head/Tail Leader
guide.content-style.headTail.leader.text=The space between the body’s content and the head or tail can be filled with this text, which is useful for a dot leader and similar effects.
guide.content-style.headTail.leaderLetterStyle.title=Head/Tail Leader Letter Style
guide.content-style.headTail.leaderLetterStyle.text=By default, the leader text uses the <a{0}>head or tail letter style</a>, but this setting allows to change it.
guide.content-style.headTail.leaderJustify.title=Justify Head/Tail Leader
guide.content-style.headTail.leaderJustify.h=The leader usually can’t fill all available space by repeating the text with the configured spacing, and a little strip is left. The left buttons of this setting decide whether the leader should be justified left/middle/right inside the available space, or the spacing should be slightly stretched to truly fill the entire space. The former three options are useful to make the leaders uniform when, e.g., all body content shares the same left edge. The latter option on the other hand avoids uneven margins between the content and the leaders.
guide.content-style.headTail.leaderJustify.v=The right buttons decide whether the leader should be justified top/middle/bottom in the body row, or aligned with the body row’s baseline. Baseline alignment is especially useful for a dot leader, in which case it should also be activated for the <a{0}>head or tail itself</a>.
guide.content-style.headTail.leaderGaps.title=Head/Tail Leader Gaps
guide.content-style.headTail.leaderGaps.text=This setting controls the margins between the leader and the left/right content, as well as the spacing in between repetitions of the leader text itself.
guide.content-style.grid-layout.title=Grid Layout
guide.content-style.grid-layout.intro=The grid body layout arranges the body cells in a 2-dimensional grid. It should be used any time you want a fixed number of columns. It’s also the simplest choice when the body is expected to always have just a single cell.
guide.content-style.grid-layout.cols.text=This setting defines the number of columns in the grid.
guide.content-style.grid-layout.fillingOrder.text=By default, the body cells fill the first row from left two right, then continue with the second row, and so on. You can change this filling order to right-to-left. And you can even completely fill the leftmost or rightmost column before continuing with the next column.
guide.content-style.grid-layout.balancedFilling.text=If the number of body cells doesn’t perfectly fill the grid, the cells in the last row are centered by default. This is more visually pleasant than if the cells were off to one side. If need be, you can of course disable this behavior.
guide.content-style.grid-layout.gridStructure.text=By default, the columns shrink to their minimum possible widths. For many designs however, it makes sense to have all columns share the same width to achieve visual uniformity. As a third option, you can even force all grid cells to be square, which can sometimes be useful for logos.
guide.content-style.grid-layout.force.title=Force Column Width/Row Height
guide.content-style.grid-layout.force.text=This setting forces all columns or rows to have a certain, manually specified width or height.
guide.content-style.grid-layout.harmonizeWidth.basics=This setting enforces for each column individually that it has the same width in all grids. By default, this setting only affects blocks of the same content style, but can be broadened to include other content styles.
guide.content-style.grid-layout.harmonizeWidth.mismatch=If one of those other styles has more columns than this style, one can choose whether to harmonize this style’s columns with the leftmost or rightmost columns of the other style. It’s also possible to insert empty ghost cells for the missing columns, which can help with alignment.
guide.content-style.grid-layout.harmonizeHeight.text=This setting forces all rows to have the same height. The first option only affects cells inside the same block. The second option affects cells across all blocks with the same content style. This can be further broadened to include other content styles.
guide.content-style.grid-layout.hJustify.text=This setting controls for each column whether its content should be justified left, centered, or justified right.
guide.content-style.grid-layout.vJustify.text=Sometimes, a row is higher than a cell’s content, for example when working with images of different sizes in the same row, or when using square cells. In these cases, this setting specifies whether the content should be justified top, centered, or justified bottom.
guide.content-style.grid-layout.gaps.title=Row/Column Gap
guide.content-style.grid-layout.gaps.text=This amount of blank pixels is inserted between rows respectively columns in the grid.
guide.content-style.flow-layout.title=Flow Layout
guide.content-style.flow-layout.intro=The flow body layout arranges the body cells in a line until a maximum width is exceeded. At that point, they wrap to the next line. The layout is useful for bullet-separated collections of names and everything else that doesn’t fit into a fixed grid, like logos with varying aspect ratios.
guide.content-style.flow-layout.flowDirection.text=By default, cells flow from left to right, but that can be changed to right-to-left.
guide.content-style.flow-layout.justifyLines.text=This setting controls whether the cells in each line should be justified left or right, centered, or fully justified. In the latter case, the last line’s justification can be controlled separately.
guide.content-style.flow-layout.squareCells.text=This setting forces all cells to be square and also have the same size, which can sometimes be useful for logos.
guide.content-style.flow-layout.force.title=Force Cell Width/Height
guide.content-style.flow-layout.force.text=These settings force all cells to have a certain, manually specified width or height.
guide.content-style.flow-layout.harmonize.title=Harmonize Cell Width/Height
guide.content-style.flow-layout.harmonize.text=These settings force cells to have the same width respectively height. The first option only affects cells inside the same block. The second option affects cells across all blocks with the same content style. This can be further broadened to include other content styles.
guide.content-style.flow-layout.justifyCells.text=This setting controls whether content should be justified left/center/right and top/middle/bottom inside the cells. It also applies to the separator text. The settings are of course only effective when the cells are actually larger than the content, which is not always the case.
guide.content-style.flow-layout.lineWidth.text=When the cells in a line exceeds this width, it is wrapped automatically. Red layout guides indicate the configured width.
guide.content-style.flow-layout.gaps.title=Line/Horizontal Gap
guide.content-style.flow-layout.gaps.text=This amount of blank pixels is inserted vertically between lines respectively horizontally between cells.
guide.content-style.flow-layout.separator.text=This text is placed horizontally in between cells. It doesn’t contribute to the cell spacing. By default, it uses the {0}, but that can be changed.
guide.content-style.flow-layout.separatorVJustify.text=This setting controls whether the separator text should be justified top/middle/bottom in the line, or aligned with the cells’ baseline.
guide.content-style.paragraphs-layout.title=Paragraphs Layout
guide.content-style.paragraphs-layout.intro=The paragraphs body layout interprets each body cell—be it a piece of text or a picture—as a paragraph. Text in a paragraph is automatically wrapped when it exceeds a maximum width. This layout is especially useful for legal blurb and other kinds of long-form text.
guide.content-style.paragraphs-layout.justifyLines.text=Just like in a word processor, this setting controls whether the text and the pictures should be justified left or right, centered, or fully justified. In the latter case, the last line’s justification can be controlled separately.
guide.content-style.paragraphs-layout.lineWidth.text=When the text exceeds this width, it is wrapped automatically. Red layout guides indicate the configured width.
guide.content-style.paragraphs-layout.gaps.title=Paragraph/Line Gap
guide.content-style.paragraphs-layout.gaps.text=This amount of blank pixels is inserted between paragraphs respectively text lines inside a paragraph.
guide.letter-style.title=Letter Styles
guide.letter-style.intro=Letter styles tell Cinecred how to draw and decorate text. You create these styles in the styling window, and then assign them to <a{0}>content styles</a>. Additionally, it is possible to <a{1}>directly assign them</a> to portions of text in the <em>Credits</em> spreadsheet. This article explains the configuration options of a letter style.
guide.letter-style.changeFontSize=Don’t worry about being able changing the font size later on. All settings will automatically be scaled to the new size so that the text appears the same as before, just larger or smaller.
guide.letter-style.name.text=Like all other styles, letter styles have a unique name. It is used to reference them both from content styles and directly from within the <em>Credits</em> spreadsheet.
guide.letter-style.font.basics=This setting specifies the font family and font face. Cinecred ships with a collection of fonts that are well-suited for credits. Alternatively, custom fonts can be placed in the project folder; they then appear in this menu as well.
guide.letter-style.font.system=It’s also possible to choose any font installed on the system, though this is discouraged as your colleagues might not have the same fonts installed when you share the project with them.
guide.letter-style.height.text=In Cinecred, font size is given as height in pixels, and not as point size like in other programs. This enables uniform and pixel-perfect vertical layouts.
guide.letter-style.leading.text=Sometimes, the font designer didn’t vertically center his font even though you require it, or you find the line spacing to small or too large. In such cases, empty space can be added (or even removed) above or below the text. The height of the text box remains the same, but the font size will change and the text will shift to reflect the added or removed empty space.
guide.letter-style.tracking.text=This setting increases or decreases the spacing between individual letters. You may want to look into disabling {0} and {1} if you substantially adjust the tracking, as these features are tailored to the tracking expected by the font designer.
guide.letter-style.kerning.settings=If all letters were spaced uniformly, certain sequences of letters like <em>Ta</em> would appear too loosely spaced. Kerning is a feature provided by most fonts that compresses the spacing between such pairs of letters.
guide.letter-style.kerning.features=Under the hood, this setting toggles the {0} OpenType feature.
guide.letter-style.ligatures.setting=Some sequences of letters like <em>ffi</em> can look weird, so many fonts substitute them with special depictions called ligatures.
guide.letter-style.ligatures.features=Under the hood, this setting toggles the {0} and {1} OpenType features.
guide.letter-style.uppercase.basics=If the text should be in uppercase, it’s best to just enable this setting instead of manually entering all caps text into the <em>Credits</em> spreadsheet. This gives you the flexibility to change your mind later on.
guide.letter-style.uppercase.exceptions=Some portions like nobiliary particles should usually be exempted. When the {0} option is enabled, the project-wide {1} apply, which by default contain all common nobiliary particles.
guide.letter-style.uppercase.spacing=Some fonts provide different letter spacing for all caps text. The {0} option switches to this spacing. Under the hood, it toggles the {1} OpenType feature.
guide.letter-style.smallCaps.setting=This setting converts all lowercase letters to shrunken versions of the corresponding uppercase letters. Both the small caps variant and the less common petite caps variant can be enabled.
guide.letter-style.smallCaps.features=Under the hood, this setting toggles the {0} or {1} OpenType feature. If small respectively petite caps are not supported by the font, they are emulated by shrinking regular uppercase letters.
guide.letter-style.superscript.basics=This setting scales and positions the text as superscript or subscript as defined by the font. Second level super/subscript is also available, for example:
guide.letter-style.superscript.custom=In rare cases, if the font-provided superscript and subscript is not satisfactory, the {0} option allows to manually scale and shift the text to achieve better positioning.
guide.letter-style.superscript.features=Under the hood, this setting does <em>not</em> use the {0} and {1} OpenType features. If the font supports them, and they cover all the letters you need, you can however enable them <a{2}>manually</a> instead of using this setting.
guide.letter-style.hScaling.text=This setting horizontally squishes or stretches the text. Be aware that excessive scaling deviates from what the designer imagined, and hence could make the text less readable.
guide.letter-style.features.setting=Modern OpenType fonts offer a plethora of additional features. The most important ones are controlled by explicit letter style settings. All others can manually be enabled with this setting.
guide.letter-style.features.available=The set of offered features depends on the font. For documentation on each feature and its permissible values, visit the <a{0}>registered features list</a>.
guide.letter-style.layers.title=Layers
guide.letter-style.layers.text=All settings introduced so far only control the selection and sizing of letters, but not their coloring, background, underline, and other visual properties. That is done by a stack of so-called layers. Proceed to the following article for more information:
guide.letter-style.layer.title=Layers
guide.letter-style.layer.intro=The coloring, background, underline, and other visual properties of text are controlled by a stack of layers.
guide.letter-style.layer.basics=Each layer defines a shape and a coloring to fill the shape with. Layers are drawn from bottom to top. Use the plus buttons to insert new layers. Drag the layers around to reorder them. Use the {0} buttons to remove layers.
guide.letter-style.layer.advanced=We recommend to name each layer, so you can quickly find your way later on. It also helps that most layer settings are hidden behind the {0} button.
guide.letter-style.layer.alt=Adding, changing, naming, moving, and deleting a layer
guide.letter-style.layer.inherit.text=If two letter styles should share the same visuals, do not just duplicate the layer stack, but instead use this setting in one of the styles to automatically take on the other style’s stack. This not only shelters you from manually having to keep two stacks in sync, but also causes neighboring segments of text to be considered as one piece:
guide.letter-style.layer.coloring.text=This setting defines how to fill the layer’s shape. Both a solid color and a gradient are supported. A gradient has two extremal colors, an angle (“0°” is from top to bottom, “90°” is from left to right), a distance between the extremal colors, and a shift of the entire gradient along the gradient axis. Finally, the layer may also be turned invisible, which can be useful when composing shapes via cloning.
guide.letter-style.layer.textShape.intro=When the {0} setting is set to “{1}”, the layer’s shape comprises the text’s letters.
guide.letter-style.layer.stripeShape.intro=When the {0} setting is set to “{1}”, the layer’s shape comprises a stripe that runs along the entire length of the text. The stripe can be positioned and customized with the following settings.
guide.letter-style.layer.stripeShape.preset.text=This setting defines the thickness and position of the stripe. You can either enter custom values, create a background that covers the entire font height, or create an underline or strikethrough line as envisioned by the font designer.
guide.letter-style.layer.stripeShape.widening.text=This setting prolongs the stripe further to the left or right, beyond the border of the text. Backgrounds can additionally be extended to the top or bottom. Shortening is also possible.
guide.letter-style.layer.stripeShape.corners.text=This setting rounds or bevels the four corners of the stripe.
guide.letter-style.layer.stripeShape.dash.setting=This setting enables horizontal dashing of the stripe. It defines a sequence of numbers, which when repeated gives a sequence of dash and gap lengths. For example:
guide.letter-style.layer.stripeShape.dash.example1=Entering a single number “10” leads to 10 pixel wide dashes, separated by 10 pixel wide gaps.
guide.letter-style.layer.stripeShape.dash.example2=Entering two numbers “10” and “20” leads to 10 pixel wide dashes, separated by 20 pixel wide gaps.
guide.letter-style.layer.stripeShape.dash.example3=Entering three numbers “10”, “20”, and “30” leads to a slightly irregular pattern: A 10 pixel wide dash, followed by a 20 pixel wide gap, followed by a 30 pixel wide dash, followed by a 10 pixel wide gap, and so on.
guide.letter-style.layer.cloneShape.intro=When the {0} setting is set to “{1}”, the layer’s shape comprises the shapes of a selection of other layers. Together with the {2} setting, such layers can be useful for creating drop shadows, among other things.
guide.letter-style.layer.dilation.text=This setting grows the layer’s shape on all sides. It can be useful for creating a glow, halo, or non-offset drop shadow behind the text, among other things.
guide.letter-style.layer.contour.text=This setting replaces the layer’s shape with its outline. The thickness and corner style can be customized.
guide.letter-style.layer.transform.text=These transformation settings move, scale, or shear the layer’s shape. They do not affect the text box. Movement can be specified in Cartesian (x & y) or polar (angle & distance) coordinates.
guide.letter-style.layer.anchor.basics=When scaling or shearing a shape, it’s ambiguous around which point the transformation should happen. This setting lets you choose that point:
guide.letter-style.layer.anchor.individual=“{0}”: The transformations happens around the center of the shape.
guide.letter-style.layer.anchor.global=“{0}”: The transformation happens around the center of the text box.
guide.letter-style.layer.anchor.forClone=For {0} layers with more than one cloned shape, a third option is available:
guide.letter-style.layer.anchor.sibling=“{0}”: The transformation happens around the center of one of the cloned shapes; you choose which one. Be aware that {1} layers can’t be selected here.
guide.letter-style.layer.clear.setting=This setting pokes holes into the layer’s shape by cutting out the shapes of other layers. Increasing the radius additionally cuts out a gap around the other layers. The corner style can be customized.
guide.letter-style.layer.clear.example=This setting could for example be used to clear an underline around letters like <em>q</em> that reach below the baseline.
guide.letter-style.layer.blur.text=This setting blurs the entire layer using a Gaussian blur. Be aware that very high radii can hurt performance.
guide.transition-style.title=Transition Styles
guide.transition-style.intro=Transition styles specify animation ramps. They have two uses:
guide.transition-style.uses.fades=They govern how card pages and videos fade in and out. For this, see the sections on <a{0}>card page fades</a> and <a{1}>video fades</a>.
guide.transition-style.uses.melts=They determine how the scrolling speed smoothly changes between melted card and scroll pages. For this, see the {0} column in the <em>Credits</em> spreadsheet.
guide.transition-style.name.text=Like all other styles, transition styles have a unique name. It is used to reference them from other styles and the <em>Credits</em> spreadsheet.
guide.transition-style.graph.text=Use the control points of this Bézier curve to customize how to transition from zero opacity (bottom left) to full opacity (top right), or from a stillstand (bottom left) to the full scrolling speed (top right). For the other way around, the graph is simply interpreted from right to left.
guide.picture-video.title=Pictures & Videos
guide.picture-video.intro=You can embed pictures, videos, and image sequences into your credits. Once you <a{0}>reference</a> a media file from the <em>Credits</em> spreadsheet, it automatically pops up in the styling window for configuration. You may omit the file extension, or append a qualifier to separately configure multiple appearances of the same file.
guide.picture-video.manual=Conversely, you could also manually add a picture or video entry in the styling window, and thereafter reference that entry from the spreadsheet.
guide.picture-video.name.text=This unique name is what you reference from the <em>Credits</em> spreadsheet. It may or may not match the name of the actual media file. Notice that the same file may be used by different picture/video entries, which is useful to, e.g., embed the same logo at different sizes.
guide.picture-video.file.title=File or Folder
guide.picture-video.file.select=Here, you select a picture or video file from the project folder or any subfolder:
guide.picture-video.file.imgSeq=Image sequences are also supported, and show up as their folder name. For example, the following image sequence would be called {0}:
guide.picture-video.file.missing=If some media file is missing, then either its format is unsupported, or its filename is not unique across all files in the project folder.
guide.picture-video.resolution.text=By default, pictures and videos are shown in their original size. Use this setting to resize their width, height, or both.
guide.picture-video.pictures.title=Pictures
guide.picture-video.pictures.formats.title=Be Cautious About Picture Formats
guide.picture-video.pictures.formats.permissible=For logos, always try to use files with the extensions {0}. These are vector graphics that can be scaled arbitrarily without any quality loss. If you don’t have a vector version of a logo at hand, ask for it. Only fall back to {1} files if absolutely necessary, as these are raster graphics, which may look bad upon rescaling.
guide.picture-video.pictures.formats.jpeg=Do absolutely never use {0} files for logos. While JPEG compression appears visually lossless for organic photos, it badly messes up high contrast edges, of which there are plenty in typical logos. The result will look very amateurish:
guide.picture-video.pictures.formats.jpeg.alt=The Cinecred logo encoded as {0}
guide.picture-video.pictures.cropBlankSpace.text=This setting crops the empty space around vector pictures ({0}).
guide.picture-video.videos.title=Videos
guide.picture-video.videos.playStart=In the credits, a video will start playing as soon as it comes into view:
guide.picture-video.videos.stillPreview=The still preview shows the video’s first frame in low resolution:
guide.picture-video.videos.slice.text=By default, the video plays from its beginning until it’s either over or out of view. You can trim the part of the video that is played using this setting. The out point is exclusive. Use the reset buttons to insert the first respectively last frame of the video.
guide.picture-video.videos.temporallyJustify.text=If the video’s length (after trimming) doesn’t exactly match the playback timeframe, the video’s first frame is aligned with the timeframe’s beginning. Alternatively, you can use this setting to align the video’s middle respectively last frame with the timeframe’s middle respectively end.
guide.picture-video.videos.temporalMargin.text=By default, the playback timeframe starts as soon as the video comes into view and stops once it goes out of view. This setting controls how much time should be peeled off the timeframe at the start and end.
guide.picture-video.videos.audio.title=Audio
guide.picture-video.videos.audio.timeline=Cinecred only processes video streams and discards any accompanying audio. If you want to retain the sound, you need to bring it back manually in finishing. To do this, export the {0} as a {1} file from the delivery window, and use it to precisely align the audio of each embedded video clip.
guide.color-management.title=Color Management
guide.color-management.targetAudience=This page gives in-depth technical details on rendering and color management in Cinecred. If you are not familiar with color spaces, it will be hardly interesting.
guide.color-management.pixelFormat=Cinecred renders in 32-bit floating point RGBA and converts from/to the actually ingested or outputted pixel format as the first respectively last step. Color math is implemented by the <a{0}>zimg library</a>.
guide.color-management.colorTags=ICC profiles of embedded pictures and CICP tags (ISO/IEC 23091-2) of embedded videos are observed. If this information is missing, Cinecred assumes sRGB for pictures and BT.709 for videos.
guide.color-management.gamut.title=Gamut
guide.color-management.gamut.rendering=The rendering gamut is equivalent to the particular output gamut, e.g., when delivering in BT.2020, rendering will also occur in BT.2020. Rendering is color-managed: when necessary, colors will be converted between gamuts in a relative colorimetric way.
guide.color-management.gamut.reduction=Out-of-gamut colors will be reduced to the rendering gamut by just clipping the RGB channels. This can naturally lead to artifacts for very out-of-gamut colors. In such cases, try to use suitable software to conform embedded pictures and videos to the rendering gamut ahead of time.
guide.color-management.trc.title=Transfer Characteristics
guide.color-management.trc.gamma=Rendering is <em>not</em> done in linear light but with a gamma of 2.2. There are multiple reasons for this:
guide.color-management.trc.gamma.expectation=Over decades of computer graphics, users became used to blending happening in the sRGB transfer characteristics, and gamma 2.2 is very close to them.
guide.color-management.trc.gamma.perception=Linear light wouldn’t be perceptually uniform, i.e., doubling the color value (which for linear light directly corresponds to the number of photons) doesn’t lead to double the perceived brightness. In contrast, gamma 2.2 does a better job of modelling this, so it provides a pretty good scale of perceived brightness. Due to this, in gamma 2.2 linearly increasing the alpha is actually perceived as a linear fade-in.
guide.color-management.trc.gamma.antialiasing=Additionally, in linear light, the antialiasing of text and other vector graphics would make white-on-black text appear thicker than black-on-white text. The perceptual brightness modelling of gamma 2.2 fixes this imbalance.
guide.color-management.trc.displayReferred=Ingested and outputted colors with other transfer characteristics are of course accurately converted. Some transfer characteristics specify different functions for the scene-referred case (OETF: opto-electronic transfer function) and the display-referred case (EOTF: electro-optical transfer function). Cinecred always uses the display-referred EOTF and its inverse. This is communicated in the UI: the term EOTF is prevalent, and the BT.709 transfer characteristics are referred to as BT.1886.
guide.color-management.trc.hdr.title=HDR
guide.color-management.trc.hdr.mapping=Cinecred is fully capable of processing HDR brightness ranges. When ingesting or outputting with an HDR EOTF, SDR white (the color where all RGB channels in any traditional gamma are 1) needs to be mapped to a particular encoded pixel value:
guide.color-management.trc.hdr.mapping.pq=For PQ, SDR white is mapped to a luminance of 203 cd/m², as recommended by BT.2408.
guide.color-management.trc.hdr.mapping.hlg=For HLG, SDR white is mapped to an encoded pixel value of 0.75. When this value is displayed on a 1000 cd/m² display, it also comes out as 203 cd/m².
guide.color-management.trc.hdr.preserve=Thanks to those fixed mappings, when you, e.g., insert a PQ video into your credits and then deliver in PQ as well, the embedded video’s brightness will be exactly preserved.
guide.color-management.colorPicker.title=Color Picker
guide.color-management.colorPicker.text=Cinecred offers a color picker that lets you input colors in any color space, so you could, e.g., specify exact BT.2020 PQ pixel values of the credits text. If you then deliver in BT.2020 PQ, the delivered video will naturally exhibit exactly those pixel values thanks to the color management.
privacy-policy.title=Privacy Policy
privacy-policy.responsible=The person responsible for data processing is Felix Mujkanovic, who you can reach at {0}.
privacy-policy.website.title=Website
privacy-policy.website.logging=We log each of your requests to this website for diagnostic and security reasons. Specifically, we store the time and date, your IP address, the user agent of your browser, the requested URL, the HTTP referer, as well as some technical data (specifically the HTTP status code and the size of our response). The log entries are deleted after a couple of weeks, and are not used for any other purposes.
privacy-policy.website.rights=You have the right to obtain the log entries concerning you, to delete them, and to limit or object their usage. For that, contact the abovementioned person responsible for this website. Moreover, you have the right to complain to the responsible data protection authority.
privacy-policy.cinecred.upload=Cinecred is a local application that never uploads your data anywhere.
privacy-policy.cinecred.updater=If you enable the update checker, our server is queried each time you start the program. Please refer to the {0} section in this privacy policy.
privacy-policy.cinecred.googleSheets.title=Google Sheets Integration
privacy-policy.cinecred.googleSheets.queries=When using the Google Sheets integration, Google servers are regularly queried. Please refer to <a{0}>Google’s Privacy Policy</a>.
privacy-policy.cinecred.googleSheets.policy=Cinecred’s use and transfer to any other app of information received from Google APIs will adhere to the {0}, including the Limited Use requirements.
